require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const { body } = require('express-validator');
const validateRequest = require('./middleware/validationMiddleware');
const app = express();
app.use(express.json());
app.use(cors());

const User = require('./models/User');
const Post = require('./models/Post');

// üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log('MongoDB connected'))
  .catch(err => console.error(err));

// üöÄ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/users', async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post(
  '/users',
  [
    body('name').isString().notEmpty().withMessage('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
    body('email').isEmail().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')
  ],
  validateRequest,
  async (req, res) => {
    try {
      const user = await User.create(req.body);
      res.status(201).json(user);
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  }
);

// üöÄ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤
app.get('/posts', async (req, res) => {
  try {
    const posts = await Post.find().populate('author');
    res.json(posts);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post(
  '/posts',
  [
    body('title').isString().notEmpty().withMessage('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
    body('content').isString().notEmpty().withMessage('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
    body('author').isMongoId().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–≤—Ç–æ—Ä–∞')
  ],
  validateRequest,
  async (req, res) => {
    try {
      const post = await Post.create(req.body);
      res.status(201).json(post);
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  }
);


// üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É
app.post(
  '/posts/:id/comments',
  [
    body('body').isString().notEmpty().withMessage('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
  ],
  validateRequest,
  async (req, res) => {
    try {
      const post = await Post.findById(req.params.id);
      if (!post) throw new Error('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');

      post.comments.push({ body: req.body.body });
      await post.save();
      res.json(post);
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  }
);


// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`));
